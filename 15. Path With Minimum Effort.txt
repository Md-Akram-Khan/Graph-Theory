//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    int MinimumEffort(vector<vector<int>>& heights) {
        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> diff(m, vector<int> (n, 1e9));
        diff[0][0] = 0;
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        pq.push({0, {0, 0}});
        int dr[] = {0, 0, 1, -1};
        int dc[] = {1, -1, 0, 0};
        while(!pq.empty())
        {
            auto it = pq.top();
            int d = it.first;
            int r = it.second.first;
            int c = it.second.second;
            pq.pop();
            for(int i = 0; i < 4; i++)
            {
                int nr = r + dr[i], nc = c + dc[i];
                if(nr >= 0 and nr < m and nc >= 0 and nc < n and max(d, abs(heights[r][c] - heights[nr][nc])) < diff[nr][nc])
                {
                    diff[nr][nc] = max(d, abs(heights[r][c] - heights[nr][nc]));
                    pq.push({diff[nr][nc], {nr, nc}});
                }
            }
        }
        return diff[m - 1][n - 1];
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n,m; cin>>n>>m;
        vector<vector<int>> heights;
       
        for(int i=0; i<n; ++i){
            vector<int> temp;
            for(int j=0; j<m; ++j){
                int x; cin>>x;
                temp.push_back(x);
            }
            heights.push_back(temp);
        }
       
        Solution obj;
        cout<<obj.MinimumEffort(heights)<<"\n";
    }
    return 0;
}
// } Driver Code Ends