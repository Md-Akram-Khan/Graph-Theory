vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
{
    priority_queue<pair<int,int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    vector<int> dis(V);
    for(int i = 0; i < V; i++)
        dis[i] = 1e9;
    dis[S] = 0;
    pq.push({0, S});
    while(!pq.empty())
    {
        int dis_of_parent = pq.top().first;
        int parent = pq.top().second;
        pq.pop();
        for(auto i : adj[parent])
        {
            int child = i[0];
            int weight = i[1];
            if(dis_of_parent + weight < dis[child])
            {
                dis[child] = dis_of_parent + weight;
                pq.push({dis[child], child});
            }
        }
    }
    return dis;
}
*/
// using set //
vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
{
    set<pair<int, int>> s;
    vector<int> dis(V, 1e9);
    dis[S] = 0;
    s.insert({0, S});
    while(!s.empty())
    {
        auto it = *(s.begin());
        int dis_of_parent = it.first;
        int parent = it.second;
        s.erase(it);
        for(auto i : adj[parent])
        {
            int child = i[0];
            int weight = i[1];
            if(dis_of_parent + weight < dis[child])
            {
                if(dis[child] != 1e9)
                {
                    s.erase({dis[child], child});
                }
                dis[child] = dis_of_parent + weight;
                s.insert({dis[child], child});
            }
        }
    }
    return dis;
}
*/
