//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution
{
    private:
    void bfs(int source, vector<int> adj[], vector<int> &vis, vector<int> &dis)
    {
        vis[source] = 1;
        dis[source] = 0;
        queue<int> q;
        q.push(source);
        while(!q.empty())
        {
            int u = q.front();
            q.pop();
            for(auto i : adj[u])
            {
                if(!vis[i])
                {
                    vis[i] = 1;
                    dis[i] = dis[u] + 1;
                    q.push(i);
                }
            }
        }
    }
	public:
	//Function to find the level of node X.
	int nodeLevel(int V, vector<int> adj[], int X) 
	{
	    vector<int> vis(V,0), dis(V,-1);
	    bfs(0, adj, vis, dis);
	    if(X >=0 && X < V) 
	        return dis[X];
	    else 
	        return -1;
	}
};

//{ Driver Code Starts.


int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E, X;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    		adj[v].push_back(u);
    	}
    	cin>>X;

    	Solution obj;
    	cout << obj.nodeLevel(V, adj, X) << "\n";
    }

    return 0;
}


// } Driver Code Ends