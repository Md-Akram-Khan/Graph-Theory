void toposort(int node, int vis[], vector<pair<int, int>> adj[], stack<int> &st)
{
    vis[node] = 1;
    for(auto it: adj[node])
    {
        int a = it.first;
        if(!vis[a])
        {
            toposort(a, vis, adj, st);
        }
    }
    st.push(node);
}
vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){ // N = total nodes, M = total edges
    vector<pair<int, int>> adj[N];
    for(int i = 0; i < M; i++)
    {
        adj[edges[i][0]].push_back({edges[i][1], edges[i][2]});
    }
    int vis[N] = {0};
    stack<int> st;
    for(int i = 0; i < N; i++)
    {
        if(!vis[i])
        {
            toposort(i, vis, adj, st);
        }
    }
    vector<int> dis(N);
    for(int i = 0; i < N; i++)
    {
        dis[i] = 1e9;
    }
    dis[0] = 0; // source node is zero or distance is counting from zero th node
    while(!st.empty())
    {
        int node = st.top();
        st.pop();
        for(auto it: adj[node])
        {
            if(dis[node] + it.second < dis[it.first])
            {
                dis[it.first] = dis[node] + it.second;
            }
        }
    }
    for(int i = 0; i < N; i++)
    {
        if(dis[i] == 1e9) dis[i] = -1; // they are not connected with source node
    }
    return dis;
}
