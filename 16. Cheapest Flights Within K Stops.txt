//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int K)  {
        vector<pair<int, int>> adj[n];
        for(auto i: flights)
        {
            adj[i[0]].push_back({i[1], i[2]});
        }
        int step = -1;
        vector<int> dis(n, 1e9);
        queue<pair<int, pair<int, int>>> q;
        dis[src] = 0;
        q.push({step, {0, src}});
        while(!q.empty())
        {
            auto it = q.front();
            int step = it.first;
            int prev_cost = it.second.first;
            int from = it.second.second;
            q.pop();
            for(auto i: adj[from])
            {
                int to = i.first;
                int cost = i.second;
                if(cost + prev_cost < dis[to] && step + 1 <= K)
                {
                    dis[to] = cost + prev_cost;
                    q.push({step + 1, {dis[to], to}});
                }
            }
        }
        if(dis[dst] == 1e9) return -1;
        else return dis[dst];
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n; cin>>n;
        int edge; cin>>edge;
        vector<vector<int>> flights;
        
        for(int i=0; i<edge; ++i){
            vector<int> temp;
            for(int j=0; j<3; ++j){
                int x; cin>>x;
                temp.push_back(x);
            }
            flights.push_back(temp);
        }
        
        int src,dst,k;
        cin>>src>>dst>>k;
        Solution obj;
        cout<<obj.CheapestFLight(n,flights,src,dst,k)<<"\n";
    }
    return 0;
}
// } Driver Code Ends