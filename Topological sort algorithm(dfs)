void dfs(int node, int vis[], stack<int> &st, vector<int> adj[])
{
    vis[node] = 1;
    for(auto it : adj[node])
    {
        if(!vis[it])
        {
            dfs(it, vis, st, adj);
        }
    }
    st.push(node);
}
vector<int> topoSort(int total_node, vector<int> adj[]) 
{
    int vis[total_node] = {0};
    stack<int> st;
    vector<int> ans;
    for(int i = 0; i < total_node; i++)
    {
        if(!vis[i])
        {
            dfs(i, vis, st, adj);
        }
    }
    while(!st.empty())
    {
        ans.push_back(st.top());
        st.pop();
    }
    return ans;
}

/*
//without using stack//
void dfs(int node, int vis[], vector<int> adj[], vector<int> &ans)
{
    vis[node] = 1;
    for(auto it : adj[node])
    {
        if(!vis[it])
        {
            dfs(it, vis, adj, ans);
        }
    }
    ans.push_back(node);
}
vector<int> topoSort(int V, vector<int> adj[]) 
{
    int vis[V] = {0};
    vector<int> ans;
    for(int i = 0; i < V; i++)
    {
        if(!vis[i])
        {
            dfs(i, vis, adj, ans);
        }
    }
    reverse(ans.begin(), ans.end());
    return ans;
}
*/
