vector<int> shortestpath(vector<int> adj[],int n, int s, int d) //here n = total node, s = source, d = destination
{
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    vector<int> dis(n + 1, 1e9), parent(n + 1);
    parent[s] = s;
    dis[s] = 0;
    pq.push({0, s});
    while(!pq.empty())
    {
        int dis_of_father = pq.top().first;
        int father = pq.top().second;
        pq.pop();
        for(auto i : adj[father])
        {
            int child = i.first;
            int weight = i.second;
            if(dis_of_father + weight < dis[child])
            {
                dis[child] = dis_of_father + weight;
                parent[child] = father;
                pq.push(dis[child], child);
            }
        }
        if(dis[d] == 1e9) return {-1};
        vector<int> path;
        int node = d;
        while(parent[node] != node)
        {
            path.push_back(node);
            node = parent[node];
        }
        path.push_back(s);
        return path;
    }
}
