vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){ // N = total nodes, M = total edges
    vector<int> adj[N];
    for(int i = 0; i < M; i++)
    {
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    queue<int> q;
    vector<int> dis(N);
    for(int i = 0; i < N; i++)
    {
        dis[i] = 1e9;
    }
    dis[src] = 0;
    q.push(src);
    int vis[N] = {0};
    vis[src] = 1;
    while(!q.empty())
    {
        int node = q.front();
        q.pop();
        for(auto it: adj[node])
        {
            dis[it] = min(dis[node] + 1,dis[it]);
            if(!vis[it])
            {
                q.push(it);
                vis[it] = 1;
            }
        }
    }
    for(int i = 0; i < N; i++)
        if(dis[i] == 1e9) dis[i] = -1; // not connected with source node
    return dis;
}
